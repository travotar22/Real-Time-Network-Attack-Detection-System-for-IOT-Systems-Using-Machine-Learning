import scapy.all as scapy
import joblib
import socket
import pandas as pd
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

# Load the model
model = joblib.load('trained_knn_model.joblib')

def ip_to_int(ip_address):
    try:
        return int(socket.inet_aton(ip_address).hex(), 16)
    except socket.error:
        return 0  

def packet_info(packet):
    if packet.haslayer(scapy.IP):
        ip_src = ip_to_int(packet[scapy.IP].src)
        ip_dst = ip_to_int(packet[scapy.IP].dst)
        ttl = packet[scapy.IP].ttl
        proto = packet[scapy.IP].proto
        packet_size = len(packet)

        # Function to handle TCP and UDP packets
        def handle_packet(packet, src_port, dst_port, flag_details):
            # Creating a feature vector
            feature_vector = [ip_src, ip_dst, src_port, dst_port, proto, packet_size, ttl]
            feature_vector.extend(flag_details.values())

            # Converting the feature vector into a pandas DataFrame with column names
            feature_names = ['ip_src', 'ip_dst', 'src_port', 'dst_port', 'proto', 'packet_size', 'ttl'] + \
                            list(flag_details.keys())

            feature_df = pd.DataFrame([feature_vector], columns=feature_names)

            prediction = model.predict(feature_df)

            print(f"Prediction: {'Malicious' if prediction else 'Not Malicious'}, Features: {feature_vector}")

        if packet.haslayer(scapy.TCP):
            src_port = packet[scapy.TCP].sport
            dst_port = packet[scapy.TCP].dport

            tcp = packet[scapy.TCP]

            flags = {
                "Flag_0": 0,  # Adjust this flag as per your definition
                "Flag_A": int(tcp.flags.A),
                "Flag_FA": int(tcp.flags.F and tcp.flags.A),
                "Flag_PA": int(tcp.flags.P and tcp.flags.A),
                "Flag_R": int(tcp.flags.R),
                "Flag_RA": int(tcp.flags.R and tcp.flags.A),
                "Flag_S": int(tcp.flags.S),
                "Flag_SA": int(tcp.flags.S and tcp.flags.A),
            }

            handle_packet(packet, src_port, dst_port, flags)

        elif packet.haslayer(scapy.UDP):
            src_port = packet[scapy.UDP].sport
            dst_port = packet[scapy.UDP].dport

            # For UDP packets, flag details might not be applicable, you can modify as per your needs
            flags = {
                "Flag_0": 0,
                "Flag_A": 0,
                "Flag_FA": 0,
                "Flag_PA": 0,
                "Flag_R": 0,
                "Flag_RA": 0,
                "Flag_S": 0,
                "Flag_SA": 0,
            }

            handle_packet(packet, src_port, dst_port, flags)

        else:
            print("Non-TCP/UDP Packet")

# Replace 'Wi-Fi' with your specific interface name
scapy.sniff(iface="Wi-Fi", prn=packet_info, store=0)
